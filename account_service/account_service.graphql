



type Mutation {
	"""
	Create new users using the User Input
	"""
	createNewUsers(newUser: NewUserInput!): UserType!
	"""
	Deletes the User from the system
	"""
	deleteUser(userId: ID!): Boolean!
	"""
	Update User Detaisl
	"""
	updateUserDetails(userId: ID!, newUser: NewUserInput!): UserType!
	updateUserPassword(userId: ID!, password: String!): UserType!
	"""
	Logins the user, Also Updates the LastUserLogin Row for the Same User
	"""
	loginUser(user: UserLogin!): String!
	createNewProfile(newUser: NewProfileInput!): ProfileType!
	deleteProfile(userId: ID!, profileId: ID!): Boolean!
	updateUserProfile(userId: ID!, profileId: ID!, newProfile: NewProfileInput!): ProfileType
}

"""
ISO 8601 combined date and time without timezone.

# Examples

* `2015-07-01T08:59:60.123`,
"""
scalar NaiveDateTime

input NewProfileInput {
	userId: ID!
	username: String!
	createdAt: NaiveDateTime!
	updatedAt: NaiveDateTime
}

input NewUserInput {
	"""
	Input Email
	"""
	email: String!
	"""
	Password; Min Password Strength
	"""
	hash: String!
	"""
	Optional Input, the values are generated automatically
	"""
	createdAt: NaiveDateTime
	"""
	Optional input, the values are auto generated
	"""
	updatedAt: NaiveDateTime
	"""
	Username,
	Min_length: 2 characters; Max_length: 50 characters
	"""
	username: String!
	"""
	First_name, Non-nullable, min-length is 1
	"""
	firstName: String!
	"""
	Last name, non-nullable,
	Min-length: 1; Max-length: 50
	"""
	lastName: String!
	"""
	User Profile image
	Ideally, this image url is linked to a Static Database ie S3
	"""
	imageUrl: String
	"""
	User's last_login:
	This is hidden from the user, however it will be automatically
	updated everytime the user creates a new user and logins
	"""
	lastLoginAt: NaiveDateTime
	"""
	Optional, default values are set to USERS, can be set
	to USERS, ADMIN, CUSTOMER, OPERATOR
	"""
	role: Role
}

type ProfileType {
	profileId: ID!
	id: ID!
	username: String!
	createdAt: NaiveDateTime!
	updatedAt: NaiveDateTime
}

type Query {
	testApi: String!
	"""
	Get all the users
	"""
	getAllUsers: [UserType!]!
	"""
	Get User either from cache or Database
	"""
	getUserById(userId: ID!): UserType
	"""
	Gets the user from the cache or database
	"""
	getUserByUsername(username: String!): UserType
	getProfilesFromUser(userId: ID!): [ProfileType!]!
	getProfilesById(profileId: ID!): ProfileType!
	getProfilesByUsername(username: String!): ProfileType!
	_service: _Service!
	_entities(representations: [_Any!]!): [_Entity]!
}

enum Role {
	ADMIN
	CUSTOMER
	OPERATOR
	USER
}


input UserLogin {
	"""
	Ensure that the value is in email format
	"""
	email: String!
	"""
	Non-nullable input for password.
	Min-Char-len = 8 characters
	"""
	password: String!
}

type UserType {
	"""
	UUID
	"""
	id: ID!
	"""
	Email Stype
	"""
	email: String!
	hash: String!
	createdAt: NaiveDateTime
	updatedAt: NaiveDateTime
	username: String!
	firstName: String!
	lastName: String!
	imageUrl: String
	lastLoginAt: NaiveDateTime
	role: String!
}

"""
The `_Any` scalar is used to pass representations of entities from external
services into the root `_entities` field for execution.
"""
scalar _Any

union _Entity = UserType

type _Service {
	sdl: String
}

schema {
	query: Query
	mutation: Mutation
}
